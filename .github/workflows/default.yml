name: default

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip"
        cache-dependency-path: |
          setup.cfg
          requirements/lint.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools
        FALLBACK_BRANCH=main
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "HEAD: ${GHBRANCH} (${GITHUB_REF}, ${GITHUB_HEAD_REF})"
        # Use the same branch (if exists) for the backend.ai-client-py installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-client-py' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i "s%\(backend.ai-client-py\)@${FALLBACK_BRANCH}%\1@${GHBRANCH}%" requirements/lint.txt
        fi
        python -m pip install -U -r requirements/lint.txt
    - name: Lint with flake8
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/flake8-matcher.json"
        fi
        python -m flake8 src/ai/backend tests

  typecheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip"
        cache-dependency-path: |
          setup.cfg
          requirements/typecheck.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools
        FALLBACK_BRANCH=main
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "HEAD: ${GHBRANCH} (${GITHUB_REF}, ${GITHUB_HEAD_REF})"
        # Use the same branch (if exists) for the backend.ai-client-py installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-client-py' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i "s%\(backend.ai-client-py\)@${FALLBACK_BRANCH}%\1@${GHBRANCH}%" requirements/typecheck.txt
        fi
        set -e
        python -m pip install -U -r requirements/typecheck.txt
    - name: Type check with mypy
      run: |
        if [ "$GITHUB_EVENT_NAME" == "pull_request" -a -n "$GITHUB_HEAD_REF" ]; then
          echo "(skipping matchers for pull request from local branches)"
        else
          echo "::add-matcher::.github/workflows/mypy-matcher.json"
        fi
        python -m mypy --no-color-output src/ai/backend || exit 0

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip"
        cache-dependency-path: |
          setup.cfg
          requirements/test.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools
        FALLBACK_BRANCH=main
        if [ -n "$GITHUB_HEAD_REF" ]; then
          export GHBRANCH="${GITHUB_HEAD_REF#refs/heads/}"
        else
          export GHBRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "HEAD: ${GHBRANCH} (${GITHUB_REF}, ${GITHUB_HEAD_REF})"
        # Use the same branch (if exists) for the backend.ai-client-py installation
        set +e
        git ls-remote --heads 'https://github.com/lablup/backend.ai-client-py' | grep -q "refs/heads/${GHBRANCH}"
        if [ $? -eq 0 ]; then
          sed -i "s%\(backend.ai-client-py\)@${FALLBACK_BRANCH}%\1@${GHBRANCH}%" requirements/test.txt
        fi
        set -e
        python -m pip install -U -r requirements/test.txt
    - name: Test with pytest
      run: |
        python -m pytest -v --cov=src -m 'not integration' tests
    - name: Send code coverage report
      uses: codecov/codecov-action@v1

  deploy-to-pypi:
    needs: [lint, typecheck, test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip"
        cache-dependency-path: |
          setup.cfg
          requirements/build.txt
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools
        python -m pip install -U -r requirements/build.txt
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
